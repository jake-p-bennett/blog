[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Writing about things that interest me."
  },
  {
    "objectID": "posts/NFL Betting/index.html",
    "href": "posts/NFL Betting/index.html",
    "title": "Betting on The Athletic’s NFL Projections",
    "section": "",
    "text": "During the 2024-2025 NFL season, The Athletic maintained an NFL projections webpage that contained forecasts for each regular season and playoff game. The projections included forecasted points spreads, and I was curious to see how these forecasts compared to the Las Vegas spreads and the actual game outcomes. I back-tested a simple betting strategy:\n\nWhen The Athletic’s spread is greater than the Vegas spread, bet on the favorite.\nWhen The Athletic’s spread is less than the Vegas spread, bet on the underdog.\nIf the spreads are the same, do not place a bet.\n\nThe strategy only makes spread bets (i.e., no moneyline bets), and assumes -110 odds (wagering $110 to win $100).\nOf the 285 NFL games in the 2024-2025 season (regular season and playoffs), there were 239 games where The Athletic’s spread did not match the Vegas spread. On average, The Athletic’s spreads differed from the actual game outcome by 9.75 points, while Vegas’s spreads differed by 9.66 points. The median differences for The Athletic and Vegas were 7.5 points and 7 points, respectively. These are minimal differences, to be sure, but the Vegas lines were more accurate for the 2024-2025 season.\nUnfortunately, the betting strategy described above does not give us an edge. Assuming bets of $110, employing the strategy would have lost $1,360 for a return of -5.17%. In fact, using the complete opposite strategy would have lost $940 for a return of -3.58%, which is better than the -4.55% we would expect from winning half of our bets.\nThen I wondered if The Athletic’s spread forecasts were better for a particular “direction” of spread difference. That is to say, what if we bet only on games where The Athletic had the favorite favored by more? What if we bet only on games where The Athletic had the favorite favored by less?\nIt turns out that betting only on games where The Athletic had the favorite favored by more than Vegas would have been profitable to varying degrees, depending on what threshold of spread difference is used.\n\nThe same cannot be said for games where The Athletic had the favorite favored by less:\n\nThe Athletic is still publishing weekly spread forecasts for the current 2025-2026 season (e.g., here is the link for Week 5). I will be monitoring these projections to see if they fare better or worse than last year’s.\nIf you are curious to see more, you can download the analysis workbook and the data for this post."
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Evaluating a Betting Stragey Based on The Athletic’s Projections",
    "section": "",
    "text": "During the 2024-2025 NFL season, The Athletic maintained an NFL projections webpage [INSERT LINK HERE] that contained forecasts for each regular season and playoff game. Each projection included a forecasted points spread, and I was curious to see how these forecasts compared to the Las Vegas spreads and the actual game outcomes. I back-tested a simple betting strategy:\n\nWhen The Athletic’s spread is greater than the Vegas spread, bet on the favorite.\nWhen The Athletic’s spread is less than the Vegas spread, bet on the underdog.\nIf the spreads are the same, do not place a bet.\n\nThe strategy only makes spread bets (i.e., no moneyline bets), and assumes -110 odds (wagering $110 to win $100).\nOf the 285 NFL games in the 2024-2025 season (regular season and playoffs), there were 238 games where The Athletic’s spread did not match the Vegas spread. On average, The Athletic’s spread differed from the actual game out come by 9.75 points, while Vegas’ spread differed by 9.66 points. The median differences for The Athletic and Vegas were 7.5 points and 7 points, respectively. These are minimal differences, to be sure, but the Vegas lines were more accurate for the 2024-2025 season.\nUnfortunately, the betting strategy described above does not give us an edge. Assuming bets of $110, employing the strategy would have lost $1,460 for a return of -5.58%. In fact, using the complete opposite strategy would have lost $830 for a return of -3.17%, which is less than the -4.55% we would expect from winning half of our bets. [Insert thing about confidence interval here]\nThen I wondered if The Athletic’s spread forecasts were better for a particular direction. That is to say, what if we bet only on games where The Athletic had the favorite favored by more? What if we bet only on games where The Athletic had the favorite favored by less?\nIt turns out that betting only on games where The Athletic had the favorite favored by more than Vegas would have been profitable to varying degrees, depending on what threshold of spread difference is used.\n\nThe same cannot be said for games where The Athletic has the favorite favored by less:"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Here is my first blog to test things out.\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jake’s Blog",
    "section": "",
    "text": "Betting on The Athletic’s NFL Projections\n\n\nDid The Athletic have an edge on Vegas during the 2024 NFL season?\n\n\n\nNFL\n\nsports\n\n\n\n\n\n\nOct 4, 2025\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/NFL Betting/notebooks/nfl-notebook.html",
    "href": "posts/NFL Betting/notebooks/nfl-notebook.html",
    "title": "blog",
    "section": "",
    "text": "from bs4 import BeautifulSoup\nimport pandas as pd\nimport numpy as np\nimport glob\nimport os\n\n\n# Setting up some dictionaries etc.\nteam_name_to_id = {'Cardinals': 'ARI', 'Falcons': 'ATL', 'Colts': 'IND', 'Ravens': 'BAL', 'Patriots': 'NE', 'Bills': 'BUF', 'Panthers': 'CAR', 'Bears': 'CHI', 'Bengals': 'CIN', 'Browns': 'CLE', 'Cowboys': 'DAL', 'Broncos': 'DEN', 'Lions': 'DET', 'Packers': 'GB', 'Oilers': 'TEN', 'Texans': 'HOU', 'Jaguars': 'JAX', 'Chiefs': 'KC', 'Raiders': 'LVR', 'Chargers': 'LAC', 'Rams': 'LAR', 'Dolphins': 'MIA', 'Vikings': 'MIN', 'Saints': 'NO', 'Giants': 'NYG', 'Jets': 'NYJ', 'Eagles': 'PHI', 'Steelers': 'PIT', '49ers': 'SF', 'Seahawks': 'SEA', 'Buccaneers': 'TB', 'Titans': 'TEN', 'Commanders': 'WAS'}\nlong_team_name_to_id = {'Arizona Cardinals': 'ARI', 'Atlanta Falcons': 'ATL', 'Baltimore Colts': 'IND', 'Baltimore Ravens': 'BAL', 'Boston Patriots': 'NE', 'Buffalo Bills': 'BUF', 'Carolina Panthers': 'CAR', 'Chicago Bears': 'CHI', 'Cincinnati Bengals': 'CIN', 'Cleveland Browns': 'CLE', 'Dallas Cowboys': 'DAL', 'Denver Broncos': 'DEN', 'Detroit Lions': 'DET', 'Green Bay Packers': 'GB', 'Houston Oilers': 'TEN', 'Houston Texans': 'HOU', 'Indianapolis Colts': 'IND', 'Jacksonville Jaguars': 'JAX', 'Kansas City Chiefs': 'KC', 'Las Vegas Raiders': 'LVR', 'Los Angeles Chargers': 'LAC', 'Los Angeles Raiders': 'LVR', 'Los Angeles Rams': 'LAR', 'Miami Dolphins': 'MIA', 'Minnesota Vikings': 'MIN', 'New England Patriots': 'NE', 'New Orleans Saints': 'NO', 'New York Giants': 'NYG', 'New York Jets': 'NYJ', 'Oakland Raiders': 'LVR', 'Philadelphia Eagles': 'PHI', 'Phoenix Cardinals': 'ARI', 'Pittsburgh Steelers': 'PIT', 'San Diego Chargers': 'LAC', 'San Francisco 49ers': 'SF', 'Seattle Seahawks': 'SEA', 'St. Louis Cardinals': 'ARI', 'St. Louis Rams': 'LAR', 'Tampa Bay Buccaneers': 'TB', 'Tennessee Oilers': 'TEN', 'Tennessee Titans': 'TEN', 'Washington Commanders': 'WAS', 'Washington Football Team': 'WAS', 'Washington Redskins': 'WAS'}\nlist_of_teams = ['Bills', 'Dolphins', 'Patriots', 'Jets',\n'Bengals', 'Steelers', 'Ravens', 'Browns',\n'Texans', 'Jaguars', 'Titans', 'Colts',\n'Chiefs', 'Chargers', 'Raiders', 'Broncos',\n'Cowboys', 'Eagles', 'Commanders', 'Giants',\n'Packers', 'Bears', 'Vikings', 'Lions',\n'Saints', 'Panthers', 'Falcons', 'Buccaneers',\n'49ers', 'Rams', 'Cardinals', 'Seahawks']\n\n\n# Setting up some functions\n\n# Gather all win probs for a certain week\ndef win_prob_weekX(weekX_data):\n    win_prob_dict = dict()\n\n    for team in list_of_teams:\n        win_prob = find_win_prob(team, weekX_data)\n        win_prob_dict[team] = win_prob\n\n    return win_prob_dict\n\n# Function that returns the win probability for a certain team\ndef find_win_prob(team, weekX_data):\n    text = weekX_data\n    \n    # Find index of team name\n    start_idx = text.find(team)\n\n    # Find the '%' after that\n    percent_idx = text.find('%', start_idx)\n\n    # Get the substring directly before '%'\n    win_prob = text[percent_idx-2:percent_idx]    \n    return win_prob\n\n# Function that returns the line for a particular team\ndef find_line(team, weekX_data):\n    text = weekX_data\n\n    # Find index of team name\n    start_idx = text.find(team)\n\n    # Find the spread signifier after that\n    spread_idx = text.find('&lt;div class=\"spread-stat svelte-1yqqaah\"&gt;', start_idx)\n\n    spread_html = text[spread_idx:spread_idx+100]\n    soup = BeautifulSoup(spread_html, \"html.parser\")\n\n    value = soup.find(\"div\", class_=\"spread-stat\").text\n    return value\n    \ndef lines_weekX(weekX_data):\n    line_dict = dict()\n\n    for team in list_of_teams:\n        try:\n            line = find_line(team, weekX_data)\n        except Exception:\n            continue\n\n        if line is not None:\n            line_dict[team_name_to_id[team]] = line\n    \n    return line_dict\n\n\n# Read in html data from The Athletic's Website\nall_weeks = {}\n\n# Base path to data folder\ndata_path = os.path.join(\"..\", \"data\")\n\nathletic_path = os.path.join(data_path, \"The Athletic\")\n# Regular season data\nfor filepath in glob.glob(os.path.join(athletic_path, 'week*.html')):\n    week_name = os.path.basename(filepath).replace('.html', '')\n    with open(filepath, 'r', encoding='utf-8') as f:\n        all_weeks[week_name] = f.read()\n\n# Playoff data\nfor playoff_file in ['Wildcard.html', 'Division.html', 'Conference.html', 'Superbowl.html']:\n    key = playoff_file.replace('.html', '')  # 'Wildcard', etc.\n    path = os.path.join(athletic_path, playoff_file)\n    with open(path, 'r', encoding='utf-8') as f:\n        all_weeks[key] = f.read()\n\n\n# --- Create dictionary of weekly line data ---\nall_weeks_line_dict = {week: lines_weekX(html) for week, html in all_weeks.items()}\n\n# --- Read in Spreadspoke CSV data ---\ndf_interim = pd.read_csv(os.path.join(data_path, 'Spreadspoke', 'spreadspoke_scores.csv'))\ndf = df_interim[df_interim['schedule_season'] == 2024].copy()\n\n# --- Create new columns for home and away team IDs ---\ndf['team_home_id'] = df['team_home'].map(long_team_name_to_id)\ndf['team_away_id'] = df['team_away'].map(long_team_name_to_id)\n\ndf['team_underdog_id'] = np.where(\n    df['team_favorite_id'] == df['team_home_id'],\n    df['team_away_id'],\n    df['team_home_id']\n)\n\n# Fix typo in original data\ndf.at[13833,'team_favorite_id'] = 'NYJ'\n\n# --- Create column for lines from The Athletic ---\ndf['calculated_line'] = None\n\nfor week_name, week_data in all_weeks_line_dict.items():\n    # For regular weeks, extract the week number (playoffs stay as is)\n    if week_name.lower().startswith('week'):\n        week_number = week_name.replace(\"week\", \"\")\n    else:\n        week_number = week_name  # 'Wildcard', 'Division', etc.\n\n    df.loc[df['schedule_week'] == week_number, 'calculated_line'] = (\n        df.loc[df['schedule_week'] == week_number, 'team_favorite_id'].map(week_data)\n    )\n\n\n# Fill in calculated_line. The blanks currently represent games where the Vegas favorite differs from The Athletic favorite\ndf['calculated_line'] = df['calculated_line'].replace(\"\",np.nan)\n\nfor week_name, week_data in all_weeks_line_dict.items():\n    week_number = week_name.replace('week', '')\n\n    mask = (df['schedule_week'] == week_number) & (df['calculated_line'].isna())\n\n    df.loc[mask, 'calculated_line'] = (\n        df.loc[mask, 'team_underdog_id']\n        .map(week_data)\n        .str[1:]\n    )\n\n\n# Convert pick-ems to 0\ndf.loc[df['calculated_line'] == 'PK', 'calculated_line'] = 0\ndf.loc[df['calculated_line'] == 'K', 'calculated_line'] = 0\n\n\n# Convert columns to numeric and take the difference\ndf['spread_favorite'] = df['spread_favorite'].astype(\"Float32\")\ndf['calculated_line'] = df['calculated_line'].astype(\"Float32\")\n\n# Calculate difference between calculated line and spread\ndf['diff'] = df['spread_favorite'] - df['calculated_line']\n\n# See if we should take action or not\ndf['action'] = None\n\n# If diff is negative, we're betting on the underdog\n# If diff is positive, we're betting on the favorite\ndf.loc[df['diff'] &lt; 0, 'action'] = 'bet on underdog'\ndf.loc[df['diff'] &gt; 0, 'action'] = 'bet on favorite'\n\n# Let's check to see how many games there are where The Athletic's spread does not match the Vegas spread\nn = df[abs(df['diff']) &gt; 0].shape[0]\nprint(f\"Number of games with mismatched spread: {n}\")\n\nNumber of games with mismatched spread: 239\n\n\n\n\n# Step 1: Determine if favorite is home or away\ndf[\"favorite_score\"] = np.where(df[\"team_favorite_id\"] == df[\"team_home_id\"],\n                                df[\"score_home\"],\n                                df[\"score_away\"])\n\ndf[\"underdog_score\"] = np.where(df[\"team_underdog_id\"] == df[\"team_home_id\"],\n                                df[\"score_home\"],\n                                df[\"score_away\"])\n\n# Step 2: Compute margin\ndf[\"margin_fav_underdog\"] = df[\"underdog_score\"] - df[\"favorite_score\"]\n\n\ndf['result_column'] = None\ndf['modeled_v_actual_vegas'] = abs(df['spread_favorite'] - df['margin_fav_underdog'])\ndf['modeled_v_actual_nyt'] = abs(df['calculated_line'] - df['margin_fav_underdog'])\ndf.at[14085, 'modeled_v_actual_nyt'] = 0\n\n\n\n\n# Check out in total how far off the Vegas lines and The Athletic's lines were\navg_residual_athletic = df['modeled_v_actual_nyt'].mean()\navg_residual_vegas = df['modeled_v_actual_vegas'].mean()\n\nmedian_residual_athletic = df['modeled_v_actual_nyt'].median()\nmedian_residual_nyt = df['modeled_v_actual_vegas'].median()\n\nprint(\"*** Averages ***\")\nprint(f\"The Athletic: {avg_residual_athletic: .2f}\")\nprint(f\"Vegas: {avg_residual_vegas: .2f}\")\nprint(\"\\n*** Medians ***\")\nprint(f\"The Athletic: {median_residual_athletic: .2f}\")\nprint(f\"Vegas: {median_residual_nyt: .2f}\")\n\n*** Averages ***\nThe Athletic:  9.75\nVegas:  9.66\n\n*** Medians ***\nThe Athletic:  7.50\nVegas:  7.00\n\n\n\n# Main function that calculates wins and losses. I added the \"fade\" argument after discovering that betting based on my initial idea was not a good strategy\n# My intial idea was to bet on the underdog in cases where The Athletic projected a smaller line than Vegas and to bet on the favorite in cases where The Athletic projected a bigger line than Vegas\n# Flipping the \"fade\" argument to true flips those actions\n\ndef bet_results(df: pd.DataFrame, fade: bool=False, threshold: float=0.0, mode: str=\"both\") -&gt; pd.DataFrame:\n    \n    df = df.copy()\n    df['result_column'] = None\n    diff = df['diff']\n\n    # Step 1: Fade picks if requested\n    if fade:\n        df.loc[df['action'] == 'bet on underdog', 'action'] = 'bet on favorite_'\n        df.loc[df['action'] == 'bet on favorite', 'action'] = 'bet on underdog_'\n\n    # Step 2: Threshold mask\n    if mode == \"positive\":\n        threshold_mask = diff &gt;= threshold\n    elif mode == \"negative\":\n        threshold_mask = diff &lt;= -threshold\n    elif mode == \"both\":\n        threshold_mask = (diff &gt;= threshold) | (diff &lt;= -threshold)\n    else:\n        raise ValueError(\"mode must be 'positive', 'negative', or 'both'\")\n\n    # Apply results only where threshold condition is satisfied\n    # Underdog bets\n    for und_key in ['bet on underdog', 'bet on underdog_']:\n        mask = (df['action'] == und_key) & threshold_mask\n        df.loc[mask & (df['margin_fav_underdog'] &gt; df['spread_favorite']), 'result_column'] = 100\n        df.loc[mask & (df['margin_fav_underdog'] &lt; df['spread_favorite']), 'result_column'] = -110\n        df.loc[mask & (df['margin_fav_underdog'] == df['spread_favorite']), 'result_column'] = 0\n\n    # Favorite bets\n    for fav_key in ['bet on favorite', 'bet on favorite_']:\n        mask = (df['action'] == fav_key) & threshold_mask\n        df.loc[mask & (df['margin_fav_underdog'] &lt; df['spread_favorite']), 'result_column'] = 100\n        df.loc[mask & (df['margin_fav_underdog'] &gt; df['spread_favorite']), 'result_column'] = -110\n        df.loc[mask & (df['margin_fav_underdog'] == df['spread_favorite']), 'result_column'] = 0\n\n    return df\n\n\n\n# Function to calculate and print ROI of a particular strategy\ndef print_roi(df: pd.DataFrame, fade: bool=False, threshold: float = 0.0, mode: str=\"both\"):\n    \n    results = bet_results(df=df, fade=fade, threshold=threshold, mode=mode)\n    win_loss = results['result_column'].sum()\n\n    if mode == \"both\":\n        investment = sum(results['result_column'].notna()) * 110\n    elif mode == \"positive\":\n        temp_df = results[results['diff'] &gt;= threshold]\n        investment = sum(temp_df['result_column'].notna()) * 110\n        win_loss = temp_df['result_column'].sum()\n    else:\n        temp_df = results[results['diff'] &lt;= threshold]\n        investment = sum(temp_df['result_column'].notna()) * 110\n        win_loss = temp_df['result_column'].sum()\n    roi = win_loss / investment\n\n    print(f\"Number of bets placed: {investment/110:,.0f}\")\n    print(f\"Total investment: {investment}\")\n    print(f\"Total winnings/loss: {win_loss}\")\n    print(f\"ROI: {roi:.2%}\")\n\n\n# How well would the initial betting strategy work?\n\ninitial = print_roi(df, fade=False, threshold=0, mode=\"both\")\n\n# Double check this works\ntest = bet_results(df=df, fade=False, threshold=0, mode=\"both\")\ntest_sum = test['result_column'].sum()\nprint(f\"\\nTest sum is {test_sum}\")\n\nNumber of bets placed: 239\nTotal investment: 26290\nTotal winnings/loss: -1360\nROI: -5.17%\n\nTest sum is -1360\n\n\n\n# How about employing the complete opposite strategy?\n\nopposite = print_roi(df, fade=True, threshold=0, mode=\"both\")\n\nNumber of bets placed: 239\nTotal investment: 26290\nTotal winnings/loss: -940\nROI: -3.58%\n\n\n\n# Gut-check to see what our ROI would be if we won 50% of our bets\nf_f = 100 + -110\ninvestment = 110*2\nroi = f_f / investment\nprint(f\"ROI when winning 50% of bets: {roi:.2%}\")\n\nROI when winning 50% of bets: -4.55%\n\n\n\n# What about games where The Athletic has the favorite favored by more (2 points more, in this case)?\ntest = print_roi(df=df, fade=False, threshold=2, mode=\"positive\")\n\nNumber of bets placed: 18\nTotal investment: 1980\nTotal winnings/loss: 540\nROI: 27.27%\n\n\n\n# Creeate a table for games where The Athletic has the favorite favored by more\nrows = []\nfor diff in [0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5]:\n    temp_df = bet_results(df=df, fade=False, threshold=diff, mode=\"positive\")\n    profit = temp_df[temp_df['diff'] &gt;= diff]['result_column'].sum()\n    num_games = (temp_df['diff'] &gt;= diff).sum()\n    investment = num_games * 110\n    roi = (profit / investment) * 100 if investment !=0 else None\n    \n    rows.append({\n    \"Spread Difference\": diff,\n    \"Number of Games\": num_games,\n    \"Profit\": profit,\n    \"Investment\": investment,\n    \"Return\": roi\n    })\n\ntable = pd.DataFrame(rows)\n\nstyled_table = (\n    table.style\n    .format({\"Return\": \"{:.2f}%\",\n             \"Investment\": \"${:,.0f}\",\n             \"Spread Difference\": \"\\u2265{:.1f}\",\n             \"Profit\": lambda x: f\"-${abs(x):,.0f}\" if x &lt; 0 else f\"${x:,.0f}\"\n    })\n    .set_table_styles([{\"selector\": \"th\", \"props\": [(\"background-color\", \"#f2f2f2\"), (\"font-weight\", \"bold\")]}])\n    .hide(axis=\"index\")\n)\n\nimport dataframe_image as dfi\ndfi.export(\n    styled_table,\n    \"../return_table.png\",\n    table_conversion=\"chrome\"\n)\n\n\n# Create a table for games where The Athletic's spread had the favorite favored by less\nrows = []\nfor diff in [0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5]:\n    diff = diff * -1\n    temp_df = bet_results(df=df, fade=False, threshold=diff, mode=\"negative\")\n    profit = temp_df[temp_df['diff'] &lt;= diff]['result_column'].sum()\n    num_games = (temp_df['diff'] &lt;= diff).sum()\n    investment = num_games * 110\n    roi = (profit / investment) * 100 if investment !=0 else None\n    \n    rows.append({\n    \"Spread Difference\": diff,\n    \"Number of Games\": num_games,\n    \"Profit\": profit,\n    \"Investment\": investment,\n    \"Return\": roi\n    })\n\ntable = pd.DataFrame(rows)\n\nstyled_table = (\n    table.style\n    .format({\"Return\": \"{:.2f}%\",\n             \"Investment\": \"${:,.0f}\",\n             \"Spread Difference\": \"\\u2264{:.1f}\",\n             \"Profit\": lambda x: f\"-${abs(x):,.0f}\" if x &lt; 0 else f\"${x:,.0f}\"\n    })\n    .set_table_styles([{\"selector\": \"th\", \"props\": [(\"background-color\", \"#f2f2f2\"), (\"font-weight\", \"bold\")]}])\n    .hide(axis=\"index\")\n)\n\nimport dataframe_image as dfi\ndfi.export(\n    styled_table,\n    \"../return_table2.png\",\n    table_conversion=\"chrome\"\n)"
  }
]